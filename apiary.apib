FORMAT: 1A
HOST: https://catalog.elog.io

# Catalog
A REST API for clients and third-party sites to interact with the data in the catalog.

The various objects and their properties are documented in much more detail here:
https://github.com/commonsmachinery/catalog/blob/master/doc/datamodel/core.md

## Media [/media/{mediaID}{?annotations}]
A media instance, which is a read-only record of a particular media instance of a Work
at the time it was recorded in the catalog.

Media instances are intended to be the "raw material" of Works, so access to them
may be restricted in the catalog to require a reference via a Work (see Work Media below).

To make the annotations easier to use in web pages the parameter `annotations` can be set
to a list of property names, e.g. `title,locator`.  This will change the response from a plain list to a map, only
including the listed properties.  (`all` means that all properties are included in the map.)
The keys in this map are the `propertyName`, and the value a list of the Annotations for
that property.  This allows easy access like `annotations.title[0].property.value` to show
e.g. a title without having to dig through the list.

+ Parameters
    + annotations (string, optional) ... Select properties to get or update in map.

+ Model
    + Headers
    
            Link: <https://catalog.elog.io/media/6e1ee592539d7d163613d732>;rel="self"

    + Body

            {
                "id": "6e1ee592539d7d163613d732",
                "added_by": "https://catalog.elog.io/users/someUserID",
                "added_at": "2014-04-14T02:15:15Z",
                "replaces": "https://catalog.elog.io/media/prevMediaID",
                "annotations": [{
                        "id": "63613d7321ee5396e592d7d1",
                        "updated_by": "https://catalog.elog.io/users/anotherUserID",
                        "updated_at": "2014-04-14T02:15:15Z",
                        "score": 100,
                        "property": {
                            "propertyName": "title",
                            "titleLabel": "Title of the work",
                        }
                    }],
                "metadata": {
                        "xmp": "<?xml...",
                        "oembed": { "url": "http://some/photo.jpg" }
                    }
            }

### Retrieve a Media [GET]
+ Response 200 (application/json)
    [Media][]


## Media collection [/media{?offset,count,filter,sort,annotations}]
Given the role of Media as mainly internal raw material means that it often makes more sense to use
the Work Media collection instead of this one (see below).


### List Media instances [GET]
TODO: define filters and sorting.

Pagination is supported by returning a `Link` header with links according to 
http://tools.ietf.org/html/rfc5005

+ Parameters
    + offset (number, optional) ... Skip this many records in the result. Default: 0
    + count (number, optional) ... Return this many records. Default and max values are system-dependent.
    + filter (string, optional) ... Filter responses (see above). Default: no filter.
    + sort (string, optional) ... Sort response (see above). Default: "natural" sort.
    + annotations (string, optional) ... Select properties to get in response.

+ Response 200 (application/json)
    + Headers
    
            Link: <?offset=0&count=N&...>;rel="first", <?offset=Z&count=N&...>;rel="last", <?offset=X&count=N&...>;rel="previous", <?offset=Y&count=N&...>;rel="next"

    + Body
    
            []

### Create new Media instances [POST]
Since creating a Media without a Work may not make much sense in some cases, 
this endpoint might be disabled in the catalog.

Only the following properties in the request will be used:

    - annotations (empty list if omitted)
    - metadata (empty object if omitted)
    - replaces (null if omitted)

+ Request (application/json)
    [Media][]
    
+ Response 201 (application/json)
    [Media][]
    

## Create Media from an uploaded file [/media/actions/upload{?email}]

Instead of extracting all the metadata from the file locally, the catalog may provide the
service to clients to upload files for server-side processing instead.  This either requires an 
active session for a user, or an email address to be provided in the request.  In both cases an email
will be sent to the user when the file has been processed with a link to confirm the uploaded data.

### Upload file [POST]

TODO: is this a sane way to upload files, or should multi-part requests be used instead?  
Or is this really up to the client's discretion and we should accept both?

+ Parameters
    + email (string, optional) ... Uploader email, if there isn't already an active user session.
    
+ Request (mime-type/of-file)

        <file contents>

+ Response 202 (application/json)

        { "confirm_email": "foo@example.org" }
        

## Create Media from an online source [/media/actions/fetch{?url,email}]

Similar to uploading a file, this fetches information about a work that's available at a URL online
and sends a confirmation email when the processing is finished.

### Fetch online source [POST]

+ Parameters
    + url (optional, string) ... The URL, if not specified in the request body.
    + email (string, optional) ... User email, if not specified in the request body and there isn't already an active user session.

+ Request (application/json)

        { "url": "http://some/where", "email": "foo@example.org" }
        
+ Request (application/x-www-form-urlencoded)

        url=http://some/where&email=foo@example.org

+ Response 202 (application/json)

        { "confirm_email": "foo@example.org" }


## Work [/works/{id}{?include,annotations}]
A work record.

The annotations can either be manipulated via the sublist in the document, 
or via the separate Annotation collection endpoint.

The Media instances linked to this work can be (and may be required to be)
accessed via the Work.  See the Work Media endpoints below.  The list of Media instances
in the `media` property always use URLs referencing such an endpoint.  

When adding another Work's Media to this Work, add the Work Media endpoint for that other
work to the `media` list.  It will be rewritten to the Media endpoint for the target Work.

To make the annotations easier to use in web pages the parameter `annotations` can be set
to a list of property names, e.g. `title,locator`.  This will change the response from a plain list to a map, only
including the listed properties.  (`all` means that all properties are included in the map.)
The keys in this map are the `propertyName`, and the value a list of the Annotations for
that property.  This allows easy access like `annotations.title[0].property.value` to show
e.g. a title without having to dig through the list.

+ Parameters
    + id (string) ... Work record ID
    + include (string, optional) ... Which sublists to include in the response objects. 
        If omitted or empty, all lists are returned in full.  If `none`, all are omitted.
        Otherwise acomma-separated names: `collaborators`, `annotations`, `sources`, `media`.
    + annotations (string, optional) ... Select properties to get or update.

+ Model
    + Headers

            Link: <https://catalog.elog.io/works/5396e592d7d163613d7321ee>;rel="self"

    + Body
    
            {
                "id": "5396e592d7d163613d7321ee",
                "version": 17,
                "added_by": "https://catalog.elog.io/users/someUserID",
                "added_at": "2014-04-14T02:15:15Z",
                "updated_by": "https://catalog.elog.io/users/anotherUserID",
                "updated_at": "2014-04-14T02:15:15Z",
                "uri": "https://catalog.elog.io/works/5396e592d7d163613d7321ee",
                "alias": "short-name",
                "owner": "https://catalog.elog.io/users/someUserID",
                "description": "Description of work to guide catalog users (not part of the metadata)",
                "forked_from": "https://catalog.elog.io/works/parentworkID",
                "public": true,
                "collaborators": [
                    "https://catalog.elog.io/users/anotherUserID",
                    "https://catalog.elog.io/groups/someGroupID"
                    ],
                "annotations": [{
                        "id": "63613d7321ee5396e592d7d1",
                        "updated_by": "https://catalog.elog.io/users/anotherUserID",
                        "updated_at": "2014-04-14T02:15:15Z",
                        "score": 100,
                        "property": {
                            "propertyName": "title",
                            "titleLabel": "Title of the work",
                        }
                    }],
                "sources": [{
                        "source_work": "https://catalog.elog.io/works/sourceWorkID",
                        "added_by": "https://catalog.elog.io/users/anotherUserID",
                        "added_at": "2014-04-14T02:15:15Z"
                    }],
                "media": [
                    "https://catalog.elog.io/media/someMediaID",
                    "https://catalog.elog.io/media/anotherMediaID"
                    ]
            }


### Retrieve a Work [GET]
+ Response 200
    [Work][]


### Update a Work [PUT]
The following parameters can be updated, any others are ignored:

- alias
- description
- public
- collaborators
- annotations (see below)
- sources (only source_work)
- media
    
This really behaves like `PATCH`, so that any omitted parameters are not changed.

`version` can be included, which instructs the server to only perform the update if that is still
the current version of the object in the database, allowing client-side conflict handling on 
`409 Conflict`.

If `id` is included the server must check that it is the same as the URL parameter, 
to catch misaddressed updates.

If the `annotations` list is modified, new items should not include the `id` field.  
Attempting to update a missing annotation will result in a `409 Conflict`.


+ Request (application/json)
    [Work][]

+ Response 200 (application/json)
    [Work][]

+ Response 409 (application/json)

        {
            "message": "annotation does not exist",
            "property": "annotations",
            "id": "d7d163613d7321ee5396e592",
        }


### Update a Work [PATCH]

See `PUT` for details.

+ Request (application/json)

        {
            "version": 16,
            "public": true,
        }

+ Response 200 (application/json)
    [Work][]

+ Response 409 (application/json)

        {
            "message": "annotation does not exist",
            "property": "annotations",
            "id": "d7d163613d7321ee5396e592",
        }


### Delete a Work [DELETE]
+ Response 204


## Work collection [/works{?offset,count,filter,sort,include,annotations}]

### List Works [GET]
List all works visible to the current user, optionally applying paging, filters and sorting.

TODO: define filters and sorting.

Pagination is supported by returning a `Link` header with links according to 
http://tools.ietf.org/html/rfc5005

+ Parameters
    + offset (number, optional) ... Skip this many records in the result. Default: 0
    + count (number, optional) ... Return this many records. Default and max values are system-dependent.
    + filter (string, optional) ... Filter responses (see above). Default: no filter.
    + sort (string, optional) ... Sort response (see above). Default: "natural" sort.
    + include (string, optional) ... Which sublists to include in the response objects.
        See above for details.
    + annotations (string, optional) ... Select properties to get or update.

+ Response 200 (application/json)
    + Headers
    
            Link: <?offset=0&count=N&...>;rel="first", <?offset=Z&count=N&...>;rel="last", <?offset=X&count=N&...>;rel="previous", <?offset=Y&count=N&...>;rel="next"

    + Body
    
            []


### Create Work [POST]
Create a new work.  The following parameters are used, all others are included:

The following parameters are used when creating a Work:

    - alias
    - description
    - public
    - collaborators
    - annotations (see below)
    - sources (only source_work)
    - media

If any fields are missing, they are set to empty values or lists.  
The default for `public` depends on system configuration.

+ Request (application/json)
    [Work][]
    
+ Response 201 (application/json)
    [Work][]


## Work Media collection [/works/{workID}/media]
Depending on the access model configured for the catalog, Media instances might only 
be referenced via works they are linked to, and not directly.  This psuedo collection
provides that access, as well as an easier way to manipulate the list of Work media 
instances.

+ Parameters
    + workID (string) ... Work ID whose Media are manipulated

### List Work Media [GET]
Return all Media instances of the Work.

+ Response 200 (application/json)

        []
        

### Create a new Media and link it to the work [POST]
This is a shortcut (which may be mandatory to use if /media is disabled in the catalog)
that creates a Media instance and links it to an existing work in one operation.

See `POST /media` for details.

+ Request (application/json)
    [Media][]
    
+ Response 201 (application/json)
    [Media][]
        

## Create Work Media from an uploaded file [/works/{workID}/media/actions/upload]

Similar to creating a loose Media instance by uploading a file (see `POST /media/actions/upload`)
this uploads a file to create a new Media instance.  The difference is that the user must have a
session and permission to edit the Work, so there is no `email` parameter.  

The Media will be linked to the work automatically without the need for a confirmation.

TODO: should an email be sent anyway?

### Upload file [POST]

TODO: is this a sane way to upload files, or should multi-part requests be used instead?  
Or is this really up to the client's discretion and we should accept both?

+ Request (mime-type/of-file)

        <file contents>

+ Response 202 (application/json)

        { }

## Create Work Media from an online source [/works/{workID}/media/actions/fetch{?url}]

Similar to uploading a file, this fetches information about a work that's available at a URL online.
See upload file to Work Media for details.

### Fetch online source [POST]

+ Parameters
    + url (optional, string) ... The URL, if not specified in the request body.

+ Request (application/json)

        { "url": "http://some/where" }
        
+ Request (application/x-www-form-urlencoded)

        url=http://some/where

+ Response 202 (application/json)

        { }


## Work Media [/works/{workID}/media/{mediaID}]
Accessing a Media may require going via a linked Work, using this endpoint.

+ Parameters
    + workID (string) ... Work ID linking to the Media
    + mediaID (string) ... The ID of the linked Media

### Retrieve Work Media [GET]
+ Response 200 (application/json)
    [Media][]


### Unlink a Media from a Work [DELETE]
This does not delete the underlying Media instance, just the link to it.

+ Response 204


## Annotation [/works/{workID}/annotations/{annotionID}]
A Work or Media annotation, based on the [W3C Ontology for media resources](http://www.w3.org/TR/mediaont-10/).
This maps format-specific metadata into a common set of properties.

This endpoint is provided as an alternative to modifying `Work.annotations` through the
main Work endpoint.

Media objects also contain Annotations, but since Media are read-only there is no endpoint for manipulating 
that list.

+ Model
    + Headers

            Link: <https://catalog.elog.io/works/5396e592d7d163613d7321ee>;rel="self"

    + Body

            {
                "id": "63613d7321ee5396e592d7d1",
                "updated_by": "https://catalog.elog.io/users/anotherUserID",
                "updated_at": "2014-04-14T02:15:15Z",
                "score": 100,
                "property": {
                    "propertyName": "title",
                    "titleLabel": "Title of the work",
                }
            }


### Get a Work Annotation [GET]
+ Response 200 (application/json)
    [Annotation][]


### Update an Annotation [PUT]
Only the `score` and `property` Annotation properties may be changed.
Only properties included in the request are changed.

+ Request (application/json)
    [Annotation][]

+ Response 200 (application/json)
    [Annotation][]


### Update an Annotation [PATCH]
Same as `PUT`.

+ Request (application/json)
    [Annotation][]

+ Response 200 (application/json)
    [Annotation][]


### Delete an Annotation [DELETE]
+ Response 204


## Work Annotation collection [/works/{workID}/annotations]
This endpoint is provided as an alternative to accessing or adding annotations in
`Work.annotations` through the main Work endpoint.

### List Work Annotations [GET]
+ Response 200 (application/json)

        []


### Add a Work Annotation [POST]
Only `score` and `property` are used from the request body.  

`property` must include at least `propertyName` and `value`.

If `score` is omitted it is calculated from `property`.

+ Request (application/json)
    [Annotation][]

+ Response 201 (application/json)
    [Annotation][]


## Lookup works by URI [/lookup{?uri,offset,count,include}]

Lookup works based on a URI, typically either a URL denoting a web location
or a URN indicating a hash or other non-web identifier.

The best matches are always returned first.

Pagination is supported by returning a `Link` header with links according to 
http://tools.ietf.org/html/rfc5005

### Lookup by URI [GET]

+ Parameters
    + uri (string) ... A URI to lookup. Multiple URIs can be specified by repeating the parameter.
    + offset (number, optional) ... Skip this many records in the result. Default: 0
    + count (number, optional) ... Return this many records. Default and max values are system-dependent.
        If set to 1, it instructs that only the best Work object should be returned or a `404`, not a list of works.
    + include (string, optional) ... Which sublists to include in the response objects.
        See Work above for details.

+ Response 200 (application/json)
    + Headers
    
            Link: <?offset=0&count=N&...>;rel="first", <?offset=Z&count=N&...>;rel="last", <?offset=X&count=N&...>;rel="previous", <?offset=Y&count=N&...>;rel="next"

    + Body
    
            []


## Collection [/collections/{collectionID}]

TODO

## Collection collection [/collections]

TODO

## User [/users/{userID}]
Public user profiles.  `gravatar_email` is only visible to the users themselves, not to other users.
The other information is public.

+ Model
    + Header

            Link: <https://catalog.elog.io/users/5396e592d7d163613d7321ee>;rel="self"

    + Body

            {
                "id": "5396e592d7d163613d7321ee",
                "uri": "https://catalog.elog.io/users/5396e592d7d163613d7321ee",
                "alias": "foobar",
                "profile": {
                    "name": "Foo Barson",
                    "email": "foo@example.org",
                    "location": null,
                    "website": "http://this/page",
                    "gravatar_email": "foo@example.org",
                    "gravatar_hash": "34cd643fb9230abe3",
                }
            }

### Get User profile [GET]
+ Response 200 (application/json)
    [User][]


### Update User profile [PUT]

`gravatar_hash` cannot be set directly, only via `gravatar_email`.  
Only the included properties are changed, as in `PATCH`.  
Set a property to `null` to remove the value.

+ Request
    [User][]

+ Response 200 (application/json)
    [User][]


### Update User profile [PATCH]

See `PUT`.

+ Request
    [User][]

+ Response 200 (application/json)
    [User][]


## Organisation [/orgs/{orgID}]

TODO

## Organisation collections [/orgs]

TODO

## Group [/orgs/{orgID}/groups/{groupID}]

TODO

## Group collection [/orgs/{orgID}/groups]

TODO